apiVersion: v1
kind: ServiceAccount
metadata:
  name: jwt-decode-auth-dm
  namespace: api-gateway-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: jwt-decode-auth-dm-cluster-role
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: jwt-decode-auth-dm-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jwt-decode-auth-dm-cluster-role
subjects:
  - kind: ServiceAccount
    name: jwt-decode-auth-dm
    namespace: api-gateway-system
---
kind: Secret
apiVersion: v1
metadata:
  name: jwt-decode-auth-dm-token
  namespace: api-gateway-system
  annotations:
    kubernetes.io/service-account.name: jwt-decode-auth-dm
type: kubernetes.io/service-account-token
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jwt-decode-auth-dm
  namespace: api-gateway-system
  labels:
    app.kubernetes.io/managed-by: tmax-cloud
    app.kubernetes.io/component: jwt-decode
    app.kubernetes.io/name: jwt-decode-auth-dm
    app.kubernetes.io/part-of: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jwt-decode-auth-dm
      app.kubernetes.io/managed-by: tmax-cloud
      app.kubernetes.io/component: jwt-decode
      app.kubernetes.io/name: jwt-decode-auth-dm
      app.kubernetes.io/part-of: api-gateway
  template:
    metadata:
      labels:
        app: jwt-decode-auth-dm
        app.kubernetes.io/managed-by: tmax-cloud
        app.kubernetes.io/component: jwt-decode
        app.kubernetes.io/name: jwt-decode-auth-dm
        app.kubernetes.io/part-of: api-gateway
    spec:
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - traefik
              weight: 100
      containers:
      - name: jwt-decode
        image: dongminjung/jwt-decode:13
        imagePullPolicy: IfNotPresent
        env:
          - name: JWKS_URL
            value: https://hyperauth.tmaxcloud.org/auth/realms/tmax/protocol/openid-connect/certs
          - name: AUTH_HEADER_KEY
            value: Authorization
          - name: CACHE_ENABLED
            value: "true"
          - name: LOG_LEVEL
            value: debug
          - name: LOG_TYPE
            value: pretty
          - name: MAX_CACHE_KEYS
            value: "10000"
          - name: PORT
            value: "8080"
          - name: TOKEN_VALIDATED_HEADER_KEY
            value: jwt-token-validated
          - name: MULTI_CLUSTER_PREFIX
            value: multicluster
        ports:
          - name: default-8080
            protocol: TCP
            containerPort: 8080
        volumeMounts:
          - name: jwt-decode-auth-dm-token
            mountPath: /var/run/secrets/kubernetes.io/serviceaccount
            readOnly: true
      volumes:
        - name: jwt-decode-auth-dm-token
          secret:
            defaultMode: 420
            secretName: jwt-decode-auth-dm-token
---
apiVersion: v1
kind: Service
metadata:
  name: jwt-decode-auth-dm
  namespace: api-gateway-system
spec:
  type: ClusterIP
  selector:
    app: jwt-decode-auth-dm
  ports:
  - port: 8080
    protocol: TCP
    targetPort: default-8080
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: jwt-decode-auth-dm
  namespace: api-gateway-system
spec:
  forwardAuth:
    address: http://jwt-decode-auth-dm.api-gateway-system.svc:8080
    authResponseHeaders:
      - jwt-token-validated
      - Authorization
    trustForwardHeader: true
    tls:
      insecureSkipVerify: true
